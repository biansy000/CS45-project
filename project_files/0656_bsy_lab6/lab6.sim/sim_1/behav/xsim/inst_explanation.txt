000010_00000_00000_00000_00000_000010 //j 2
100011_00001_00011_00000_00000_000011 //lw $3,3($1) (flush)
000011_00000_00000_00000_00000_000100 //jal 4
100011_00001_00011_00000_00000_000011 //lw $3,3($1) (flush)
001000_00000_00001_00000_00000_000111 //addi $1, $0, 7	$1  = 7
001000_00000_10000_00000_00000_100000 //addi $16, $0, 32	$1  = 7
000000_10000_00000_00000_00000_001000 //jr $16
100011_00001_00011_00000_00000_000011 //lw $3,3($1) (flush)		
000000_00001_00010_00100_00000_100000 //add $4, $1, $2	$4 = 7 + 7 = e
000000_00001_00100_00011_00000_100000 //add $3, $1, $4 (forward) $3 = 7 + e  =15
000000_00011_00001_00101_00000_100010 //sub $5, $3, $1	$5 = e
000000_00010_00001_00110_00000_100100 //and $6, $2, $1	$6 = 7
000000_00010_00010_00111_00000_100101 //or $7, $2, $2		$7 = 7
000000_00000_00001_00001_00000_101010 //slt $1, $0, $1	$1 = 1
000000_00000_00011_01000_00010_000000 //sll $8, $3, 2		$8 = 54
000000_00000_00011_01001_00010_000010 //srl $9, $3, 2		$9 = 5
101011_00000_00001_00000_00000_000001 //sw $1, $0, 1		mem 1 = 1
100011_00000_00001_00000_00000_000010 //lw $1, $0, 2		$1 = e
100011_00000_00010_00000_00000_000011 //lw $2, $0, 3		$2 = 1e
000000_00010_00100_00011_00000_100000 //add $3, $2, $4 (stall)	$3 = 2c
000100_00000_00001_00000_00000_000001 //beq $0, $1, 1	next instruction
001000_00000_00001_00000_00000_000000 //addi $1, $0, 0	$1 = 0
000100_00000_00001_00000_00000_000001 //beq $0, $1, 1	$jump forward
001000_00000_00001_00000_00000_000010 //addi $1, $0, 2	$1 = 2
001000_00000_00001_00000_00000_000001 //addi $1, $0, 1	$1 = 1